#include <iostream>
using namespace std;

int mergeAndCount(int arr[], int temp[], int left, int mid, int right)
{
    int i = left;    
    int j = mid + 1; 
    int k = left;    
    int count = 0;
    
    while (i <= mid && j <= right)
    {
        if (arr[i] <= arr[j])
        {
            temp[k++] = arr[i++];
        } else 
        {
            temp[k++] = arr[j++];
            count += (mid - i + 1);
        }
    }
    
    while (i <= mid)
        temp[k++] = arr[i++];
    
    while (j <= right)
        temp[k++] = arr[j++];
    
    for (i = left; i <= right; i++)
        arr[i] = temp[i];
    
    return count;
}

int sortAndCount(int arr[], int temp[], int left, int right) {
    int mid, count = 0;
    if (left < right) {
        mid = (left + right) / 2;
        
        count += sortAndCount(arr, temp, left, mid);
        
        count += sortAndCount(arr, temp, mid + 1, right);
        
        count += mergeAndCount(arr, temp, left, mid, right);
    }
    return count;
}


int countInversions(int arr[], int n) 
{
    int temp[n];
    return sortAndCount(arr, temp, 0, n-1);
}

int main()
{
    int arr[] = {7, 2, 6, 3};
    int n = sizeof(arr) / sizeof(arr[0]);
    
    int count = countInversions(arr, n);
    cout << "Number of inversions: " << count << endl;
    
    return 0;
}
